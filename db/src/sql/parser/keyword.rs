/// Lexer keywords
#[derive(Clone, Debug, PartialEq)]
pub enum Keyword {
    And,
    As,
    Asc,
    Begin,
    Bool,
    Boolean,
    By,
    Char,
    Commit,
    Create,
    Cross,
    Default,
    Delete,
    Desc,
    Double,
    Drop,
    Explain,
    False,
    Float,
    From,
    Group,
    Having,
    Index,
    Infinity,
    Inner,
    Insert,
    Int,
    Integer,
    Into,
    Is,
    Join,
    Key,
    Left,
    Like,
    Limit,
    NaN,
    Not,
    Null,
    Of,
    Offset,
    On,
    Only,
    Or,
    Order,
    Outer,
    Primary,
    Read,
    References,
    Right,
    Rollback,
    Select,
    Set,
    String,
    System,
    Table,
    Text,
    Time,
    Transaction,
    True,
    Unique,
    Update,
    Values,
    Varchar,
    Where,
    Write,
}

impl Keyword {
    #[allow(clippy::should_implement_trait)]
    pub fn from_str(ident: &str) -> Option<Self> {
        Some(match ident.to_uppercase().as_ref() {
            "AS" => Self::As,
            "ASC" => Self::Asc,
            "AND" => Self::And,
            "BEGIN" => Self::Begin,
            "BOOL" => Self::Bool,
            "BOOLEAN" => Self::Boolean,
            "BY" => Self::By,
            "CHAR" => Self::Char,
            "COMMIT" => Self::Commit,
            "CREATE" => Self::Create,
            "CROSS" => Self::Cross,
            "DEFAULT" => Self::Default,
            "DELETE" => Self::Delete,
            "DESC" => Self::Desc,
            "DOUBLE" => Self::Double,
            "DROP" => Self::Drop,
            "EXPLAIN" => Self::Explain,
            "FALSE" => Self::False,
            "FLOAT" => Self::Float,
            "FROM" => Self::From,
            "GROUP" => Self::Group,
            "HAVING" => Self::Having,
            "INDEX" => Self::Index,
            "INFINITY" => Self::Infinity,
            "INNER" => Self::Inner,
            "INSERT" => Self::Insert,
            "INT" => Self::Int,
            "INTEGER" => Self::Integer,
            "INTO" => Self::Into,
            "IS" => Self::Is,
            "JOIN" => Self::Join,
            "KEY" => Self::Key,
            "LEFT" => Self::Left,
            "LIKE" => Self::Like,
            "LIMIT" => Self::Limit,
            "NAN" => Self::NaN,
            "NOT" => Self::Not,
            "NULL" => Self::Null,
            "OF" => Self::Of,
            "OFFSET" => Self::Offset,
            "ON" => Self::On,
            "ONLY" => Self::Only,
            "OR" => Self::Or,
            "ORDER" => Self::Order,
            "OUTER" => Self::Outer,
            "PRIMARY" => Self::Primary,
            "READ" => Self::Read,
            "REFERENCES" => Self::References,
            "RIGHT" => Self::Right,
            "ROLLBACK" => Self::Rollback,
            "SELECT" => Self::Select,
            "SET" => Self::Set,
            "STRING" => Self::String,
            "SYSTEM" => Self::System,
            "TABLE" => Self::Table,
            "TEXT" => Self::Text,
            "TIME" => Self::Time,
            "TRANSACTION" => Self::Transaction,
            "TRUE" => Self::True,
            "UNIQUE" => Self::Unique,
            "UPDATE" => Self::Update,
            "VALUES" => Self::Values,
            "VARCHAR" => Self::Varchar,
            "WHERE" => Self::Where,
            "WRITE" => Self::Write,
            _ => return None,
        })
    }

    pub fn to_str(&self) -> &str {
        match self {
            Self::As => "AS",
            Self::Asc => "ASC",
            Self::And => "AND",
            Self::Begin => "BEGIN",
            Self::Bool => "BOOL",
            Self::Boolean => "BOOLEAN",
            Self::By => "BY",
            Self::Char => "CHAR",
            Self::Commit => "COMMIT",
            Self::Create => "CREATE",
            Self::Cross => "CROSS",
            Self::Default => "DEFAULT",
            Self::Delete => "DELETE",
            Self::Desc => "DESC",
            Self::Double => "DOUBLE",
            Self::Drop => "DROP",
            Self::Explain => "EXPLAIN",
            Self::False => "FALSE",
            Self::Float => "FLOAT",
            Self::From => "FROM",
            Self::Group => "GROUP",
            Self::Having => "HAVING",
            Self::Index => "INDEX",
            Self::Infinity => "INFINITY",
            Self::Inner => "INNER",
            Self::Insert => "INSERT",
            Self::Int => "INT",
            Self::Integer => "INTEGER",
            Self::Into => "INTO",
            Self::Is => "IS",
            Self::Join => "JOIN",
            Self::Key => "KEY",
            Self::Left => "LEFT",
            Self::Like => "LIKE",
            Self::Limit => "LIMIT",
            Self::NaN => "NAN",
            Self::Not => "NOT",
            Self::Null => "NULL",
            Self::Of => "OF",
            Self::Offset => "OFFSET",
            Self::On => "ON",
            Self::Only => "ONLY",
            Self::Outer => "OUTER",
            Self::Or => "OR",
            Self::Order => "ORDER",
            Self::Primary => "PRIMARY",
            Self::Read => "READ",
            Self::References => "REFERENCES",
            Self::Right => "RIGHT",
            Self::Rollback => "ROLLBACK",
            Self::Select => "SELECT",
            Self::Set => "SET",
            Self::String => "STRING",
            Self::System => "SYSTEM",
            Self::Table => "TABLE",
            Self::Text => "TEXT",
            Self::Time => "TIME",
            Self::Transaction => "TRANSACTION",
            Self::True => "TRUE",
            Self::Unique => "UNIQUE",
            Self::Update => "UPDATE",
            Self::Values => "VALUES",
            Self::Varchar => "VARCHAR",
            Self::Where => "WHERE",
            Self::Write => "WRITE",
        }
    }
}